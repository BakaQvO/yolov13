diff --git a/ultralytics/nn/tasks.py b/ultralytics/nn/tasks.py
index 3ee5a85..daf2801 100644
--- a/ultralytics/nn/tasks.py
+++ b/ultralytics/nn/tasks.py
@@ -41,7 +41,6 @@ from ultralytics.nn.modules import (
     Concat,
     Conv,
     Conv2,
-    DSConv,
     ConvTranspose,
     Detect,
     DWConv,
@@ -66,10 +65,6 @@ from ultralytics.nn.modules import (
     WorldDetect,
     v10Detect,
     A2C2f,
-    HyperACE,
-    DownsampleConv,
-    FullPAD_Tunnel,
-    DSC3k2
 )
 from ultralytics.utils import DEFAULT_CFG_DICT, DEFAULT_CFG_KEYS, LOGGER, colorstr, emojis, yaml_load
 from ultralytics.utils.checks import check_requirements, check_suffix, check_yaml
@@ -1002,8 +997,6 @@ def parse_model(d, ch, verbose=True):  # model_dict, input_channels(3)
             SCDown,
             C2fCIB,
             A2C2f,
-            DSC3k2,
-            DSConv
         }:
             c1, c2 = ch[f], args[0]
             if c2 != nc:  # if c2 not equal to number of classes (i.e. for Classify() output)
@@ -1031,13 +1024,12 @@ def parse_model(d, ch, verbose=True):  # model_dict, input_channels(3)
                 C2fCIB,
                 C2PSA,
                 A2C2f,
-                DSC3k2
             }:
                 args.insert(2, n)  # number of repeats
                 n = 1
-            if m in {C3k2, DSC3k2}:  # for P/U sizes
+            if m is C3k2:  # for M/L/X sizes
                 legacy = False
-                if scale in "lx":
+                if scale in "mlx":
                     args[3] = True
             if m is A2C2f: 
                 legacy = False
@@ -1072,29 +1064,6 @@ def parse_model(d, ch, verbose=True):  # model_dict, input_channels(3)
             args = [c1, c2, *args[1:]]
         elif m is CBFuse:
             c2 = ch[f[-1]]
-        elif m is HyperACE:
-            legacy = False
-            c1 = ch[f[1]]
-            c2 = args[0]
-            c2 = make_divisible(min(c2, max_channels) * width, 8)
-            he = args[1] 
-            if scale in "n":
-                he = int(args[1] * 0.5)
-            elif scale in "x":
-                he = int(args[1] * 1.5)
-            args = [c1, c2, n, he, *args[2:]]
-            n = 1
-            if scale in "lx":  # for L/X sizes
-                args.append(False)
-        elif m is DownsampleConv:
-            c1 = ch[f]
-            c2 = c1 * 2
-            args = [c1]
-            if scale in "lx":  # for L/X sizes
-                args.append(False)
-                c2 =c1
-        elif m is FullPAD_Tunnel:
-            c2 = ch[f[0]]
         else:
             c2 = ch[f]
 
